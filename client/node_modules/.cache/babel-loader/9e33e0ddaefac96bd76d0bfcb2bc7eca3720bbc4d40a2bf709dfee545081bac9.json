{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import categoryService from \"../services/categoryService\";\n// import \"../styles/MasterForms.css\";\n\n// // Helper function: Convert buffer to Base64 in chunks\n// const bufferToBase64 = (buffer) => {\n//   let binary = \"\";\n//   const bytes = new Uint8Array(buffer);\n//   const chunkSize = 0x8000; // Process in chunks of 32768 bytes\n//   for (let i = 0; i < bytes.length; i += chunkSize) {\n//     binary += String.fromCharCode(...bytes.subarray(i, i + chunkSize));\n//   }\n//   return window.btoa(binary);\n// };\n\n// const CategoryMaster = () => {\n//   const [categories, setCategories] = useState([]);\n//   const [formData, setFormData] = useState({});\n//   const [isPopupOpen, setPopupOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     const data = await categoryService.getCategories();\n//     console.log(\"Fetched Categories:\", data);\n//     setCategories(data);\n//   };\n\n//   const handleAddNew = () => {\n//     setFormData({\n//       primaryCategory: \"\",\n//       subCategory: \"\",\n//       productName: \"\",\n//       photo: null,\n//     });\n//     setPopupOpen(true);\n//   };\n\n//   const handleEdit = (category) => {\n//     setFormData({\n//       _id: category._id,\n//       primaryCategory: category.primaryCategory || \"\",\n//       subCategory: category.subCategory || \"\",\n//       productName: category.products?.[0]?.productName || \"\",\n//       photo: null, // Reset file input\n//       existingPhoto: category.products?.[0]?.photo\n//         ? `data:${category.products[0].photo.contentType};base64,${bufferToBase64(\n//             category.products[0].photo.data.data\n//           )}`\n//         : null,\n//     });\n//     setPopupOpen(true);\n//   };\n\n//   const handleDelete = async (id) => {\n//     await categoryService.deleteCategory(id);\n//     fetchCategories();\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, files } = e.target;\n//     if (name === \"photo\" && files.length > 0) {\n//       setFormData({ ...formData, photo: files[0] });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const formDataToSend = new FormData();\n//     formDataToSend.append(\"primaryCategory\", formData.primaryCategory);\n//     formDataToSend.append(\"subCategory\", formData.subCategory);\n//     formDataToSend.append(\"productName\", formData.productName);\n\n//     if (formData.photo) {\n//       formDataToSend.append(\"photo\", formData.photo);\n//     } else if (formData.existingPhoto) {\n//       formDataToSend.append(\"existingPhoto\", formData.existingPhoto);\n//     }\n\n//     try {\n//       if (formData._id) {\n//         await categoryService.updateCategory(formData._id, formDataToSend);\n//       } else {\n//         await categoryService.addCategory(formDataToSend);\n//       }\n//       setPopupOpen(false);\n//       fetchCategories();\n//     } catch (error) {\n//       console.error(\"Error while submitting the form:\", error.response?.data || error);\n//       alert(\"An error occurred while submitting the form.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"master-container\">\n//       <h2>Category Master</h2>\n//       <button className=\"add-btn\" onClick={handleAddNew}>\n//         + Add Category\n//       </button>\n\n//       <table className=\"category-table\">\n//         <thead>\n//           <tr>\n//             <th>Primary Category</th>\n//             <th>Sub Category</th>\n//             <th>Product Name</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {categories.map((item) => (\n//             <tr key={item._id}>\n//               <td>{item.primaryCategory || \"N/A\"}</td>\n//               <td>{item.subCategory || \"N/A\"}</td>\n//               <td>{item.products?.[0]?.productName || \"N/A\"}</td>\n//               <td>\n//                 {item.products?.[0]?.photo?.data && (\n//                   <img\n//                     src={`data:${item.products[0].photo.contentType};base64,${bufferToBase64(\n//                       item.products[0].photo.data.data\n//                     )}`}\n//                     alt=\"Product\"\n//                     style={{ width: \"100px\", height: \"100px\" }}\n//                   />\n//                 )}\n//                 <button className=\"edit-btn\" onClick={() => handleEdit(item)}>\n//                   Edit\n//                 </button>\n//                 <button className=\"delete-btn\" onClick={() => handleDelete(item._id)}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {isPopupOpen && (\n//         <div className=\"popup-overlay\">\n//           <div className=\"popup-container\">\n//             <button className=\"close-btn\" onClick={() => setPopupOpen(false)}>\n//               Ã—\n//             </button>\n//             <form onSubmit={handleSubmit}>\n//               <label>Primary Category:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"primaryCategory\"\n//                 value={formData.primaryCategory || \"\"}\n//                 onChange={handleChange}\n//                 required\n//               />\n\n//               <label>Sub Category:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"subCategory\"\n//                 value={formData.subCategory || \"\"}\n//                 onChange={handleChange}\n//                 required\n//               />\n\n//               <label>Product Name:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"productName\"\n//                 value={formData.productName || \"\"}\n//                 onChange={handleChange}\n//                 required\n//               />\n\n//               <label>Product Photo:</label>\n//               {formData.existingPhoto && (\n//                 <div>\n//                   <p>Current Image:</p>\n//                   <img\n//                     src={formData.existingPhoto}\n//                     alt=\"Existing Product\"\n//                     style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\" }}\n//                   />\n//                 </div>\n//               )}\n//               <input type=\"file\" name=\"photo\" onChange={handleChange} />\n\n//               <button className=\"submit-btn\" type=\"submit\">\n//                 Save\n//               </button>\n//             </form>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CategoryMaster;\nconst express = require(\"express\");\nconst router = express.Router();\nconst Category = require(\"../models/category\");\n\n// Ensure the app parses JSON bodies\nrouter.use(express.json());\n\n// GET all categories\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const categories = await Category.find();\n    res.json(categories);\n  } catch (error) {\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// ADD new category\nrouter.post(\"/\", async (req, res) => {\n  try {\n    console.log(\"Received request:\", req.body);\n    // No file upload, so no logging for file\n\n    const {\n      productName,\n      categoryType,\n      parentCategory\n    } = req.body;\n    if (!productName || !categoryType) {\n      return res.status(400).json({\n        message: \"Product Name and Category Type are required.\"\n      });\n    }\n    // For sub categories, ensure a parent category is provided\n    if (categoryType === \"Sub\" && !parentCategory) {\n      return res.status(400).json({\n        message: \"Parent Category is required for Sub Category.\"\n      });\n    }\n    const newCategory = new Category({\n      productName,\n      categoryType,\n      parentCategory: categoryType === \"Sub\" ? parentCategory : null\n    });\n    await newCategory.save();\n    res.status(201).json(newCategory);\n  } catch (error) {\n    console.error(\"Error in POST /api/categories:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// UPDATE category\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    console.log(\"Incoming Update Request:\", req.body);\n    const {\n      productName,\n      categoryType,\n      parentCategory\n    } = req.body;\n    const category = await Category.findById(req.params.id);\n    if (!category) return res.status(404).json({\n      message: \"Category not found\"\n    });\n    if (categoryType === \"Sub\" && !parentCategory) {\n      return res.status(400).json({\n        message: \"Parent Category is required for Sub Category.\"\n      });\n    }\n    category.productName = productName;\n    category.categoryType = categoryType;\n    category.parentCategory = categoryType === \"Sub\" ? parentCategory : null;\n    const updatedCategory = await category.save();\n    res.json(updatedCategory);\n  } catch (error) {\n    console.error(\"Update Error:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// DELETE category\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    await Category.findByIdAndDelete(req.params.id);\n    res.json({\n      message: \"Category deleted successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","Category","use","json","get","req","res","categories","find","error","status","message","post","console","log","body","productName","categoryType","parentCategory","newCategory","save","put","category","findById","params","id","updatedCategory","delete","findByIdAndDelete","module","exports"],"sources":["D:/VYAVACH/client/src/components/CategoryMaster.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import categoryService from \"../services/categoryService\";\r\n// import \"../styles/MasterForms.css\";\r\n\r\n// // Helper function: Convert buffer to Base64 in chunks\r\n// const bufferToBase64 = (buffer) => {\r\n//   let binary = \"\";\r\n//   const bytes = new Uint8Array(buffer);\r\n//   const chunkSize = 0x8000; // Process in chunks of 32768 bytes\r\n//   for (let i = 0; i < bytes.length; i += chunkSize) {\r\n//     binary += String.fromCharCode(...bytes.subarray(i, i + chunkSize));\r\n//   }\r\n//   return window.btoa(binary);\r\n// };\r\n\r\n// const CategoryMaster = () => {\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [formData, setFormData] = useState({});\r\n//   const [isPopupOpen, setPopupOpen] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     const data = await categoryService.getCategories();\r\n//     console.log(\"Fetched Categories:\", data);\r\n//     setCategories(data);\r\n//   };\r\n\r\n//   const handleAddNew = () => {\r\n//     setFormData({\r\n//       primaryCategory: \"\",\r\n//       subCategory: \"\",\r\n//       productName: \"\",\r\n//       photo: null,\r\n//     });\r\n//     setPopupOpen(true);\r\n//   };\r\n\r\n//   const handleEdit = (category) => {\r\n//     setFormData({\r\n//       _id: category._id,\r\n//       primaryCategory: category.primaryCategory || \"\",\r\n//       subCategory: category.subCategory || \"\",\r\n//       productName: category.products?.[0]?.productName || \"\",\r\n//       photo: null, // Reset file input\r\n//       existingPhoto: category.products?.[0]?.photo\r\n//         ? `data:${category.products[0].photo.contentType};base64,${bufferToBase64(\r\n//             category.products[0].photo.data.data\r\n//           )}`\r\n//         : null,\r\n//     });\r\n//     setPopupOpen(true);\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     await categoryService.deleteCategory(id);\r\n//     fetchCategories();\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value, files } = e.target;\r\n//     if (name === \"photo\" && files.length > 0) {\r\n//       setFormData({ ...formData, photo: files[0] });\r\n//     } else {\r\n//       setFormData({ ...formData, [name]: value });\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const formDataToSend = new FormData();\r\n//     formDataToSend.append(\"primaryCategory\", formData.primaryCategory);\r\n//     formDataToSend.append(\"subCategory\", formData.subCategory);\r\n//     formDataToSend.append(\"productName\", formData.productName);\r\n\r\n//     if (formData.photo) {\r\n//       formDataToSend.append(\"photo\", formData.photo);\r\n//     } else if (formData.existingPhoto) {\r\n//       formDataToSend.append(\"existingPhoto\", formData.existingPhoto);\r\n//     }\r\n\r\n//     try {\r\n//       if (formData._id) {\r\n//         await categoryService.updateCategory(formData._id, formDataToSend);\r\n//       } else {\r\n//         await categoryService.addCategory(formDataToSend);\r\n//       }\r\n//       setPopupOpen(false);\r\n//       fetchCategories();\r\n//     } catch (error) {\r\n//       console.error(\"Error while submitting the form:\", error.response?.data || error);\r\n//       alert(\"An error occurred while submitting the form.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"master-container\">\r\n//       <h2>Category Master</h2>\r\n//       <button className=\"add-btn\" onClick={handleAddNew}>\r\n//         + Add Category\r\n//       </button>\r\n\r\n//       <table className=\"category-table\">\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Primary Category</th>\r\n//             <th>Sub Category</th>\r\n//             <th>Product Name</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {categories.map((item) => (\r\n//             <tr key={item._id}>\r\n//               <td>{item.primaryCategory || \"N/A\"}</td>\r\n//               <td>{item.subCategory || \"N/A\"}</td>\r\n//               <td>{item.products?.[0]?.productName || \"N/A\"}</td>\r\n//               <td>\r\n//                 {item.products?.[0]?.photo?.data && (\r\n//                   <img\r\n//                     src={`data:${item.products[0].photo.contentType};base64,${bufferToBase64(\r\n//                       item.products[0].photo.data.data\r\n//                     )}`}\r\n//                     alt=\"Product\"\r\n//                     style={{ width: \"100px\", height: \"100px\" }}\r\n//                   />\r\n//                 )}\r\n//                 <button className=\"edit-btn\" onClick={() => handleEdit(item)}>\r\n//                   Edit\r\n//                 </button>\r\n//                 <button className=\"delete-btn\" onClick={() => handleDelete(item._id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n\r\n//       {isPopupOpen && (\r\n//         <div className=\"popup-overlay\">\r\n//           <div className=\"popup-container\">\r\n//             <button className=\"close-btn\" onClick={() => setPopupOpen(false)}>\r\n//               Ã—\r\n//             </button>\r\n//             <form onSubmit={handleSubmit}>\r\n//               <label>Primary Category:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"primaryCategory\"\r\n//                 value={formData.primaryCategory || \"\"}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n\r\n//               <label>Sub Category:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"subCategory\"\r\n//                 value={formData.subCategory || \"\"}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n\r\n//               <label>Product Name:</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 name=\"productName\"\r\n//                 value={formData.productName || \"\"}\r\n//                 onChange={handleChange}\r\n//                 required\r\n//               />\r\n\r\n//               <label>Product Photo:</label>\r\n//               {formData.existingPhoto && (\r\n//                 <div>\r\n//                   <p>Current Image:</p>\r\n//                   <img\r\n//                     src={formData.existingPhoto}\r\n//                     alt=\"Existing Product\"\r\n//                     style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\" }}\r\n//                   />\r\n//                 </div>\r\n//               )}\r\n//               <input type=\"file\" name=\"photo\" onChange={handleChange} />\r\n\r\n//               <button className=\"submit-btn\" type=\"submit\">\r\n//                 Save\r\n//               </button>\r\n//             </form>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CategoryMaster;\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst Category = require(\"../models/category\");\r\n\r\n// Ensure the app parses JSON bodies\r\nrouter.use(express.json());\r\n\r\n// GET all categories\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const categories = await Category.find();\r\n    res.json(categories);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// ADD new category\r\nrouter.post(\"/\", async (req, res) => {\r\n  try {\r\n    console.log(\"Received request:\", req.body);\r\n    // No file upload, so no logging for file\r\n\r\n    const { productName, categoryType, parentCategory } = req.body;\r\n    if (!productName || !categoryType) {\r\n      return res.status(400).json({ message: \"Product Name and Category Type are required.\" });\r\n    }\r\n    // For sub categories, ensure a parent category is provided\r\n    if (categoryType === \"Sub\" && !parentCategory) {\r\n      return res.status(400).json({ message: \"Parent Category is required for Sub Category.\" });\r\n    }\r\n\r\n    const newCategory = new Category({\r\n      productName,\r\n      categoryType,\r\n      parentCategory: categoryType === \"Sub\" ? parentCategory : null,\r\n    });\r\n\r\n    await newCategory.save();\r\n    res.status(201).json(newCategory);\r\n  } catch (error) {\r\n    console.error(\"Error in POST /api/categories:\", error);\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// UPDATE category\r\nrouter.put(\"/:id\", async (req, res) => {\r\n  try {\r\n    console.log(\"Incoming Update Request:\", req.body);\r\n\r\n    const { productName, categoryType, parentCategory } = req.body;\r\n\r\n    const category = await Category.findById(req.params.id);\r\n    if (!category) return res.status(404).json({ message: \"Category not found\" });\r\n\r\n    if (categoryType === \"Sub\" && !parentCategory) {\r\n      return res.status(400).json({ message: \"Parent Category is required for Sub Category.\" });\r\n    }\r\n\r\n    category.productName = productName;\r\n    category.categoryType = categoryType;\r\n    category.parentCategory = categoryType === \"Sub\" ? parentCategory : null;\r\n\r\n    const updatedCategory = await category.save();\r\n    res.json(updatedCategory);\r\n  } catch (error) {\r\n    console.error(\"Update Error:\", error);\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\n// DELETE category\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    await Category.findByIdAndDelete(req.params.id);\r\n    res.json({ message: \"Category deleted successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}